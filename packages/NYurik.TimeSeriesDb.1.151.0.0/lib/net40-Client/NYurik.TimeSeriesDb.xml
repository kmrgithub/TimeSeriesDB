<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NYurik.TimeSeriesDb</name>
    </assembly>
    <members>
        <member name="T:NYurik.TimeSeriesDb.IGenericInvoker">
            <summary>
            The implementor of this interface can execute <see cref="M:NYurik.TimeSeriesDb.IGenericCallable`2.Run``1(NYurik.TimeSeriesDb.IGenericInvoker,`1)"/> method.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.IGenericInvoker.RunGenericMethod``2(NYurik.TimeSeriesDb.IGenericCallable{``0,``1},``1)">
            <summary>
            Calls a factory method without explicitly specifying the type of the sub-item.
            </summary>
        </member>
        <member name="F:NYurik.TimeSeriesDb.BinaryFile._baseVersion">
            <summary> Base version for new files by default </summary>
        </member>
        <member name="F:NYurik.TimeSeriesDb.BinaryFile._version">
            <summary> The version of the specific file implementation </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile.Open(System.IO.Stream,System.Func{System.String,System.Type})">
            <summary>
            Open a binary file from a filestream, and start reading the file header.
            This method must match the <see cref="M:NYurik.TimeSeriesDb.BinaryFile.CreateHeader"/> method.
            </summary>
            <param name="stream">Stream from which to read the binary data</param>
            <param name="typeResolver">
            An optional map that would override the type strings in the file with the given types.
            </param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile.CreateHeader">
            <summary>
            Serialize header info into a memory stream and return as a byte array.
            This method must match the reading sequence in the
            <see cref="M:NYurik.TimeSeriesDb.BinaryFile.Open(System.IO.Stream,System.Func{System.String,System.Type})"/>.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile.WriteHeaderV0(System.IO.BinaryWriter)">
            <summary>
            Write header versions v1.0 and v1.1
            </summary>
            <remarks>
            int32   HeaderSize
            Version BinFile base version
            string  BinaryFile...&lt;...> type name
            string  Serializer type name
            int32   ItemSize
            string  User-provided tag (non-null, v1.1 only)
            ...     BinFile custom header
            ...     Serializer custom header
            </remarks>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile.WriteHeaderV2(System.IO.BinaryWriter)">
            <summary>
            Write header versions v1.2
            </summary>
            <remarks>
            int32   HeaderSize
            Version BinFile base version
            string  User-provided tag (non-null)
            string  Serializer type name
            ...     Serializer custom header
            int32   ItemSize
            string  BinaryFile...&lt;...> type name
            ...     BinFile custom header 
            </remarks>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile.Open(System.String,System.Boolean,System.Func{System.String,System.Type},System.Int32,System.IO.FileOptions)">
            <summary>
            Open existing binary timeseries file. A <see cref="T:System.IO.FileNotFoundException"/> if the file does not exist.
            </summary>
            <param name="fileName">A relative or absolute path for the existing file to open.</param>
            <param name="canWrite">Should allow write operations</param>
            <param name="typeResolver">Optional Type resolver to override the default</param>
            <param name="bufferSize">Buffer size as used in <see cref="T:System.IO.FileStream"/> constructor</param>
            <param name="fileOptions">Options as used in <see cref="T:System.IO.FileStream"/> constructor</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile.InitializeNewFile">
            <summary> This method must be called for all new files (object created with the constructor) before usage. </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile.CalculateHeaderSizeAsItemCount">
            <summary> Size of the file header expressed as a number of items </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile.CalculateItemCountFromFilePosition(System.Int64,System.Boolean@)">
            <summary> Calculates the number of items that would make up the given file size </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile.ItemIdxToOffset(System.Int64)">
            <summary> Calculate file position from an item index </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile.Init(System.IO.BinaryReader,System.Func{System.String,System.Type})">
            <summary> Override to read custom header info. Must match the <see cref="M:NYurik.TimeSeriesDb.BinaryFile.WriteCustomHeader(System.IO.BinaryWriter)"/>. </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile.WriteCustomHeader(System.IO.BinaryWriter)">
            <summary> Override to write custom header info. Must match the <see cref="M:NYurik.TimeSeriesDb.BinaryFile.Init(System.IO.BinaryReader,System.Func{System.String,System.Type})"/>. </summary>
            <returns> Return the version number of the header. </returns>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile.PerformTruncateFile(System.Int64)">
            <summary> Shrink file to the new size. </summary>
            <param name="newCount">Number of items the file should contain after this operation</param>
        </member>
        <member name="P:NYurik.TimeSeriesDb.BinaryFile.MinPageSize">
            <summary> All memory mapping operations must align to this value (not the dwPageSize) </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.BinaryFile.MaxLargePageSize">
            <summary> Maximum number of bytes to read at once </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.BinaryFile.HeaderSize">
            <summary>
            Size of the file header, including the signature and the size itself
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.IBinaryFile.GetItemCount">
            <summary> Total number of items in the file </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.IBinaryFile.Close">
            <summary> Closes currently open file. This is a safe operation even on a disposed object. </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.ItemType">
            <summary> Type of the items stored in this file </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.Tag">
            <summary> User string stored in the header </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.IsEmpty">
            <summary> True when the file has no data </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.IsDisposed">
            <summary> True when the object has been disposed. No further operations are allowed. </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.NonGenericSerializer">
            <summary> Access to the non-generic instance of the current serializer </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.IsOpen">
            <summary>True if the file is ready for read/write operations </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.EnableMemMappedAccessOnRead">
            <summary> Can be changed at any time. Enables MMF access mode when reading from a file. </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.EnableMemMappedAccessOnWrite">
            <summary> Can be changed at any time. Enables MMF access mode when writing to a file. </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.FileName">
            <summary> Full path to the file </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.BaseVersion">
            <summary> Base version of the serializer that was used to create this file </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.ItemSize">
            <summary> The size of each item of data in bytes </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.HeaderSize">
            <summary> Size of the file header in bytes </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.CanWrite">
            <summary> Was file open for writing </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.Version">
            <summary> The version of the binary file handler used to create this file </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinaryFile.IsInitialized">
            <summary>
            True after the file has been initialized. This property will be false right after creating a new object
            but before the InitializeNewFile() is called.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile`1.#ctor">
            <summary>
            Must override this constructor to allow Activator non-public instantiation
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile`1.#ctor(System.String)">
            <summary>
            Create a new binary file. Must call <seealso cref="M:NYurik.TimeSeriesDb.BinaryFile.InitializeNewFile"/> to finish file creation.
            </summary>
            <param name="fileName">file path</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile`1.SetSerializer(NYurik.TimeSeriesDb.IBinSerializer)">
            <summary> Used by <see cref="M:NYurik.TimeSeriesDb.BinaryFile.Open(System.IO.Stream,System.Func{System.String,System.Type})"/> when opening an existing file </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile`1.ProcessStream(System.Int64,System.ArraySegment{`0},System.Boolean)">
            Access file using Stream object
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile`1.ProcessManagedStream(System.ArraySegment{`0},System.Boolean)">
            Use additional byte buffer for stream operations. Slowest method.
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile`1.PerformStreaming(System.Int64,System.Boolean,System.Collections.Generic.IEnumerable{NYurik.TimeSeriesDb.Buffer{`0}},System.Int64,System.Int64)">
            <summary>
            Enumerate items by block either in order or in reverse order, begining at the <paramref name="firstItemIdx"/>.
            </summary>
            <param name="firstItemIdx">The index of the first block to read (both forward and backward). Invalid values will be adjusted to existing data.</param>
            <param name="enumerateInReverse">Set to true to enumerate in reverse, false otherwise</param>
            <param name="bufferProvider">Provides buffers (or re-yields the same buffer) for each new result. Could be null for automatic</param>
            <param name="maxItemCount">Maximum number of items to return</param>
            <param name="cachedCount">Use if <see cref="M:NYurik.TimeSeriesDb.BinaryFile.GetCount"/> was called right before (avoids additional kernel call)</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile`1.UseMemoryMappedAccess(System.Int32,System.Boolean)">
            Return true if it is recomended to use memory mapped access for blocks of the given size
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinaryFile`1.PerformWriteStreaming(System.Collections.Generic.IEnumerator{System.ArraySegment{`0}},System.Int64)">
            <summary>
            Write segment stream to internal stream, optionally truncating the file so that <paramref name="firstItemIdx"/> would be the first written item.
            </summary>
            <param name="streamEnmr">The stream of array segments to write, with a single MoveNext() already performed (returned true)</param>
            <param name="firstItemIdx">The index of the first element in the stream. The file will be truncated if the value is less than or equal to Count</param>
        </member>
        <member name="T:NYurik.TimeSeriesDb.Initializable">
            <summary>
            Derived classes can be in initialized and non-initialized state.
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.Initializable.IsInitialized">
            <summary>
            True if this instance has been initialized
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField.#ctor">
            <summary>
            All derived classes must implement parameterless constructor used by deserialization.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField.#ctor(System.Version,NYurik.TimeSeriesDb.Serializers.BlockSerializer.IStateStore,System.Type,System.String)">
            <param name="version"></param>
            <param name="stateStore"></param>
            <param name="fieldType">Type of value to store</param>
            <param name="stateName">Name of the value (for debugging)</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField.MakeReadonly">
            <summary>
            Override this method (call base.MakeReadonly() at the end) to validate and Field's content,
            and convert any user-accessible properties to readonly.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField.Equals(NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField)">
            <summary>
            Every field must override 
            <see cref="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField.GetHashCode"/> and  <see cref="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField.Equals(NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField)"/>,
            and combine base call with its own results.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField.GetHashCode">
            <summary>
            Every field must override 
            <see cref="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField.GetHashCode"/> and  <see cref="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField.Equals(NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField)"/>,
            and combine base call with its own results.
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField.MaxByteSize">
            <summary>
            Maximum total number of bytes this field (including any nested fields) might need
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.Serializers.BlockSerializer.ConstantField.Value">
            <summary> Constant value </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.TypeUtils.FindGenericArguments(System.Collections.Generic.IEnumerable{System.Type},System.Type)">
            <summary>
            In the list of types, find a generic type with the specified generic type definition,
            and return the generic type arguments.
            </summary>
            <param name="types">List of types to search in</param>
            <param name="genericType">Generic type to search for, e.g. IEnumerable&lt;&gt;</param>
            <returns>List of arguments</returns>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.TypeUtils.FindGenericArgument1(System.Collections.Generic.IEnumerable{System.Type},System.Type)">
            <summary>
            In the list of types, find a generic one argument type with the specified generic type definition,
            and return the first generic type argument.
            </summary>
            <param name="types">List of types to search in</param>
            <param name="genericType">Generic type to search for, e.g. IEnumerable&lt;&gt;</param>
            <returns>Generic Argument</returns>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.TypeUtils.IsNullable(System.Type)">
            <summary>
            Gets a value indicating whether a type (or type's element type)
            instance can be null in the underlying data store.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns> True, if the type parameter is a closed generic nullable type; otherwise, False.</returns>
            <remarks>Arrays of Nullable types are treated as Nullable types.</remarks>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.TypeUtils.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type argument of the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns><list>
            <item>The type argument of the type parameter,
            if the type parameter is a closed generic nullable type.</item>
            <item>The underlying Type if the type parameter is an enum type.</item>
            <item>Otherwise, the type itself.</item>
            </list>
            </returns>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.TypeUtils.IsSameOrParent(System.Type,System.Type)">
            <summary>
            Determines whether the specified types are considered equal.
            </summary>
            <param name="parent">A <see cref="T:System.Type"/> instance. </param>
            <param name="child">A type possible derived from the <c>parent</c> type</param>
            <returns>True, when an object instance of the type <c>child</c>
            can be used as an object of the type <c>parent</c>; otherwise, false.</returns>
            <remarks>Note that nullable types does not have a parent-child relation to it's underlying type.
            For example, the 'int?' type (nullable int) and the 'int' type
            aren't a parent and it's child.</remarks>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.TypeUtils.TranslateGenericParameters(System.Type,System.Type[])">
            <summary>
            Substitutes the elements of an array of types for the type parameters
            of the current generic type definition and returns a Type object
            representing the resulting constructed type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance.</param>
            <param name="typeArguments">An array of types to be substituted for
            the type parameters of the current generic type.</param>
            <returns>A Type representing the constructed type formed by substituting
            the elements of <paramref name="typeArguments"/> for the type parameters
            of the current generic type.</returns>
            <seealso cref="M:System.Type.MakeGenericType(System.Type[])"/>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.TypeUtils.GetTypeFromAnyAssemblyVersion(System.String)">
            <summary>
            Load type using <see cref="M:System.Type.GetType(System.String)"/>, and if fails, 
            attempt to load same type from an assembly by assembly name, 
            without specifying assembly version or any other part of the signature
            </summary>
            <param name="typeName">
            The assembly-qualified name of the type to get (<see cref="P:System.Type.AssemblyQualifiedName"/>).
            If the type is in the currently executing assembly or in Mscorlib.dll, it 
            is sufficient to supply the type name qualified by its namespace.
            </param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.TypeUtils.GetSingleAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Get a single attribute (or null) of a given type attached to a value.
            The value might be a <see cref="T:System.Type"/> object or Property/Method/... info acquired through reflection.
            An exception is thrown if more than one attribute of a given type is found.
            </summary>
            <typeparam name="TAttr">Type of the attribute to get</typeparam>
            <param name="customAttrProvider">Enum value</param>
            <returns>An attribute object or null if not found</returns>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.TypeUtils.ValidateNoRefStruct(System.Reflection.FieldInfo,System.Type)">
            <summary>
            When used with <see cref="M:NYurik.TimeSeriesDb.Serializers.TypeUtils.TraverseTypeTree(System.Type,System.Action{System.Reflection.FieldInfo,System.Type})"/>,
            recursively checks if the type with all of its members are expressable as a value type that may be cast to a pointer.
            Equivalent to what compiler does to check for CS0208 error of this statement:
                   fixed (int* p = new int[5]) {}
            
            An unmanaged-type is any type that isn’t a reference-type and doesn’t contain reference-type fields 
            at any level of nesting. In other words, an unmanaged-type is one of the following:
             * sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, or bool.
             * Any enum-type.
             * Any pointer-type.
             * Any user-defined struct-type that contains fields of unmanaged-types only.
            
            Strings are not in that list, even though you can use them in structs. 
            Fixed-size arrays of unmanaged-types are allowed.
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.BinCompressedSeriesFile">
            <summary>
              Helper non-generic class aids in creating a new instance of <see cref="T:NYurik.TimeSeriesDb.BinCompressedSeriesFile`2"/> .
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinCompressedSeriesFile.GenericNew(System.Type,System.Type,System.String,System.Reflection.FieldInfo)">
            <summary>
              Uses reflection to create an instance of <see cref="T:NYurik.TimeSeriesDb.BinCompressedSeriesFile`2"/> .
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.BinCompressedSeriesFile`2">
            <summary>
              Object representing a binary-serialized long-based series file.
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.IWritableFeed`2">
            <summary>
            Implementors can read and store values of type <typeparamref name="TVal"/>.
            </summary>
            <typeparam name="TInd">Type of the index. Must be comparable.</typeparam>
            <typeparam name="TVal">Type of the value stored</typeparam>
        </member>
        <member name="T:NYurik.TimeSeriesDb.IWritableFeed">
            <summary>
            Implementors can read and store values.
            Any type implementing this interface must also implement <see cref="T:NYurik.TimeSeriesDb.IWritableFeed`2"/>.
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.IGenericInvoker2">
            <summary>
            The implementor of this interface can execute <see cref="M:NYurik.TimeSeriesDb.IGenericCallable2`2.Run``2(NYurik.TimeSeriesDb.IGenericInvoker2,`1)"/> method.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.IGenericInvoker2.RunGenericMethod``2(NYurik.TimeSeriesDb.IGenericCallable2{``0,``1},``1)">
            <summary>
            Calls a factory method without explicitly specifying the two types of the sub-items.
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IWritableFeed.IsEmpty">
            <summary>
            Returns true if this file is empty
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IWritableFeed.UniqueIndexes">
            <summary>
            False if more than one identical index is allowed in the feed, True otherwise
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IWritableFeed.ItemType">
            <summary> Type of the items stored in this file </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IWritableFeed.Tag">
            <summary> User string stored in the file </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.IEnumerableFeed`2">
            <summary>
            Implementors can read <typeparamref name="TVal"/> values as a stream.
            It is assumed that value's index is somehow stored inside the value.
            </summary>
            <typeparam name="TInd">Type of the index. Must be comparable.</typeparam>
            <typeparam name="TVal">Type of the value stored</typeparam>
        </member>
        <member name="M:NYurik.TimeSeriesDb.IEnumerableFeed`2.StreamSegments(`0,System.Boolean,System.Collections.Generic.IEnumerable{NYurik.TimeSeriesDb.Buffer{`1}},System.Int64)">
            <summary>
            Read data from the underlying storage one block at a time.
            </summary>
            <param name="fromInd">The index of the first element to read.
            If default(<typeparamref name="TInd"/>), will read from the first item going forward, or last when going in reverse.
            Inclusive if going forward, exclusive when going backwards.</param>
            <param name="inReverse">Set to true if you want to enumerate backwards, from last to first</param>
            <param name="bufferProvider">Provides buffers (or re-yields the same buffer) for each new result. Could be null for automatic</param>
            <param name="maxItemCount">Maximum number of items to return</param>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IEnumerableFeed`2.IndexAccessor">
            <summary>
            Returns function that can extract TInd index from a given value T
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.IWritableFeed`2.AppendData(System.Collections.Generic.IEnumerable{System.ArraySegment{`1}},System.Boolean)">
            <summary>
            Add new items at the end of the existing file.
            Special case: If file allows non-unique indexes, and the new data starts with the same index as the last in file,
            duplicate indexes will be preserved if <paramref name="allowFileTruncation"/> is false,
            whereas when true, the file's last item(s) with that index will be deleted.
            </summary>
            <param name="newData">Stream of new data to be added.</param>
            <param name="allowFileTruncation">If true, the file will be truncated up to, but not including the first new item's index.
            If false, no data will be removed from the file.</param>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IWritableFeed`2.FirstIndex">
            <summary>
            If available, returns the first index of the feed, or default(TInd) if empty
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IWritableFeed`2.LastIndex">
            <summary>
            If available, returns the last index of the feed, or default(TInd) if empty
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinCompressedSeriesFile`2.#ctor">
            <summary>
              Allow Activator non-public instantiation
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinCompressedSeriesFile`2.#ctor(System.String,System.Reflection.FieldInfo,System.Func{NYurik.TimeSeriesDb.Serializers.BlockSerializer.IStateStore,System.Type,System.String,NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField})">
            <summary>
              Create new timeseries file. If the file already exists, an <see cref="T:System.IO.IOException"/> is thrown.
            </summary>
            <param name="fileName"> A relative or absolute path for the file to create. </param>
            <param name="indexFieldInfo"> Field containing the TInd index, or null to get default </param>
            <param name="fieldFactory"> Custom field factory may be provided to customize how 
            <see cref="T:NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField"/> fields are created for the type <typeparamref name="TVal"/>.
            The factory can return null (default will be used), or create a field of the given type and name.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinCompressedSeriesFile`2.AppendData(System.Collections.Generic.IEnumerable{System.ArraySegment{`1}},System.Boolean)">
            <summary>
              Add new items at the end of the existing file
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinCompressedSeriesFile`2.GetBlockByIndex(`0,System.Boolean,System.Int64)">
            <summary>
            Using binary search, find the block that would contain needed index.
            Returns -1 if index is before the first item.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinCompressedSeriesFile`2.JoinStreams(`0,System.Collections.Generic.IEnumerator{`1},System.Boolean,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Slightly hacky merge of an old values enumerable with an iterator over the new ones.
            This code assumes that it will be called only once for this IEnumerator.
            If includeEquals = true, includes old items with the index that equals to the first new one.
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.BinCompressedSeriesFile`2.BinarySearchCacheSize">
            <summary>
            Number of binary search lookups to cache. 0-internal defaults, negative-disable
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.BinCompressedSeriesFile`2.IndexAccessor">
            <summary>
              A delegate to a function that extracts index of a given item
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.BufferProvider`1">
            <summary>
            Yields buffers that could either be the same instance as previous, or a larger one.
            A weak reference will be kept so as to reduce the number of memory allocations.
            All public methods are thread safe.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BufferProvider`1.YieldMaxGrowingBuffer(System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            Yield maximum available buffer every time. If the buffer is smaller than initSize,
            allocate [initSize] items first, and after growAfter iterations, grow it to the largeSize.
            Buffer.Count will always be set to 0
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BufferProvider`1.YieldSingleFixedSize(System.Int32)">
            <summary>
            Yield a single buffer of a given size or larger.
            Buffer.Count will be set to size
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BufferProvider`1.YieldFixed(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Yields a sequence of buffers with the count set to:
            [blockOne, blockTwo, (growAfter * smallSize), largeSize...]
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.Common.FormattedException">
            <summary>
            Generic exception capable of delayed message formatting.
            Inherit for more specific exceptions.
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions">
            <summary>
            A wrapper around the <see cref="T:System.Reflection.Emit.ILGenerator"/> class.
            </summary>
            <seealso cref="T:System.Reflection.Emit.ILGenerator">ILGenerator Class</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.BeginCatchBlock(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Begins a catch block.
            </summary>
            <param name="il"/>
            <param name="exceptionType">The Type object that represents the exception.</param>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">ILGenerator.BeginCatchBlock Method</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.BeginExceptFilterBlock(System.Reflection.Emit.ILGenerator)">
            <summary>
            Begins an exception block for a filtered exception.
            </summary>
            <param name="il"/>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">ILGenerator.BeginCatchBlock Method</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.BeginExceptionBlock(System.Reflection.Emit.ILGenerator)">
            <summary>
            Begins an exception block for a non-filtered exception.
            </summary>
            <param name="il"/>
            <returns>The label for the end of the block.</returns>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.BeginFaultBlock(System.Reflection.Emit.ILGenerator)">
            <summary>
            Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.BeginFinallyBlock(System.Reflection.Emit.ILGenerator)">
            <summary>
            Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.BeginScope(System.Reflection.Emit.ILGenerator)">
            <summary>
            Begins a lexical scope.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.DeclareLocal(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Declares a local variable.
            </summary>
            <param name="il"/>
            <param name="localType">The Type of the local variable.</param>
            <returns>The declared local variable.</returns>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.DeclareLocal(System.Reflection.Emit.ILGenerator,System.Type,System.Boolean)">
            <summary>
            Declares a local variable.
            </summary>
            <param name="il"/>
            <param name="localType">The Type of the local variable.</param>
            <param name="pinned">true to pin the object in memory; otherwise, false.</param>
            <returns>The declared local variable.</returns>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.DefineLabel(System.Reflection.Emit.ILGenerator)">
            <summary>
            Declares a new label.
            </summary>
            <param name="il"/>
            <returns>Returns a new label that can be used as a token for branching.</returns>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.EndExceptionBlock(System.Reflection.Emit.ILGenerator)">
            <summary>
            Ends an exception block.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.EndScope(System.Reflection.Emit.ILGenerator)">
            <summary>
            Ends a lexical scope.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.MarkLabelExt(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Marks the Microsoft intermediate language (MSIL) stream's current position 
            with the given label. Due to this method having identical signature with 
            the <see cref="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)"/>, the name has been changed.
            </summary>
            <param name="il"/>
            <param name="loc">The label for which to set an index.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.MarkSequencePoint(System.Reflection.Emit.ILGenerator,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Marks a sequence point in the Microsoft intermediate language (MSIL) stream.
            </summary>
            <param name="il"/>
            <param name="document">The document for which the sequence point is being defined.</param>
            <param name="startLine">The line where the sequence point begins.</param>
            <param name="startColumn">The column in the line where the sequence point begins.</param>
            <param name="endLine">The line where the sequence point ends.</param>
            <param name="endColumn">The column in the line where the sequence point ends.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ThrowException(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits an instruction to throw an exception.
            </summary>
            <param name="il"/>
            <param name="exceptionType">The class of the type of exception to throw.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.UsingNamespace(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            Specifies the namespace to be used in evaluating locals and watches for 
            the current active lexical scope.
            </summary>
            <param name="il"/>
            <param name="namespaceName">The namespace to be used in evaluating locals and watches for the current active lexical scope.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.add(System.Reflection.Emit.ILGenerator)">
            <summary>
            Adds two values and pushes the result onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Add"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Add">OpCodes.Add</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.add_ovf(System.Reflection.Emit.ILGenerator)">
            <summary>
            Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Add_Ovf"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Add_Ovf">OpCodes.Add_Ovf</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.add_ovf_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">OpCodes.Add_Ovf_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.and(System.Reflection.Emit.ILGenerator)">
            <summary>
            Computes the bitwise AND of two values and pushes the result onto the evalution stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.And"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.And">OpCodes.And</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.arglist(System.Reflection.Emit.ILGenerator)">
            <summary>
            Returns an unmanaged pointer to the argument list of the current method
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Arglist"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Arglist">OpCodes.Arglist</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.beq(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if two values are equal
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Beq"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Beq">OpCodes.Beq</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.beq_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if two values are equal
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Beq_S"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Beq_S">OpCodes.Beq_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.bge(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if the first value is greater than or equal to the second value
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge">OpCodes.Bge</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.bge_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) 
            if the first value is greater than or equal to the second value
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_S"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_S">OpCodes.Bge_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.bge_un(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if the the first value is greather than the second value,
            when comparing unsigned integer values or unordered float values
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_Un"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_Un">OpCodes.Bge_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.bge_un_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if if the the first value is greather than the second value,
            when comparing unsigned integer values or unordered float values
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_Un_S"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_Un_S">OpCodes.Bge_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.bgt(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if the first value is greater than the second value
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt">OpCodes.Bgt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.bgt_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if the first value is greater than the second value
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_S"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_S">OpCodes.Bgt_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.bgt_un(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if the first value is greater than the second value,
            when comparing unsigned integer values or unordered float values
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_Un"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_Un">OpCodes.Bgt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.bgt_un_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if the first value is greater than the second value,
            when comparing unsigned integer values or unordered float values
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_Un_S"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">OpCodes.Bgt_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ble(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if the first value is less than or equal to the second value
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble">OpCodes.Ble</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ble_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if the first value is less than or equal to the second value
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_S"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_S">OpCodes.Ble_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ble_un(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if the first value is less than or equal to the second value,
            when comparing unsigned integer values or unordered float values
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_Un"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_Un">OpCodes.Ble_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ble_un_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if the first value is less than or equal to the second value,
            when comparing unsigned integer values or unordered float values
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_Un_S"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_Un_S">OpCodes.Ble_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.blt(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if the first value is less than the second value
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt">OpCodes.Blt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.blt_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if the first value is less than the second value
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_S"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_S">OpCodes.Blt_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.blt_un(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if the first value is less than the second value,
            when comparing unsigned integer values or unordered float values
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_Un"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_Un">OpCodes.Blt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.blt_un_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if the first value is less than the second value,
            when comparing unsigned integer values or unordered float values
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_Un_S"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_Un_S">OpCodes.Blt_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.bne_un(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bne_Un"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bne_Un">OpCodes.Bne_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.bne_un_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) 
            when two unsigned integer values or unordered float values are not equal
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bne_Un_S"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bne_Un_S">OpCodes.Bne_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.box(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts a value type to an object reference
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Box"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Box">OpCodes.Box</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.boxIfValueType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts a value type to an object reference if the value is a value type.
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Box">OpCodes.Box</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.br(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Unconditionally transfer control to a target instruction
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Br"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Br">OpCodes.Br</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.break(System.Reflection.Emit.ILGenerator)">
            <summary>
            Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Break"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Break">OpCodes.Break</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.brfalse(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if value is false, a null reference (Nothing in Visual Basic), or zero
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brfalse"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brfalse">OpCodes.Brfalse</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.brfalse_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if value is false, a null reference, or zero
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brfalse_S"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brfalse_S">OpCodes.Brfalse_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.brtrue(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if value is true, not null, or non-zero
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brtrue"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brtrue">OpCodes.Brtrue</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.brtrue_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if value is true, not null, or non-zero
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brtrue_S"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brtrue_S">OpCodes.Brtrue_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.br_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Unconditionally transfers control to a target instruction (short form)
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Br_S"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Br_S">OpCodes.Br_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls the method indicated by the passed method descriptor
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, methodInfo).
            </summary>
            <param name="il"/>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.call(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>
            Calls the method indicated by the passed method descriptor
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, constructorInfo).
            </summary>
            <param name="il"/>
            <param name="constructorInfo">The constructor to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Calls the method indicated by the passed method descriptor
            by calling ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, methodInfo, optionalParameterTypes).
            </summary>
            <param name="il"/>
            <param name="methodInfo">The method to be called.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.call(System.Reflection.Emit.ILGenerator,System.Type,System.String,System.Type[])">
            <summary>
            Calls the method indicated by the passed method descriptor
            by calling ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, methodInfo, optionalParameterTypes).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <param name="methodName">The name of the method to be called.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.call(System.Reflection.Emit.ILGenerator,System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Calls the method indicated by the passed method descriptor
            by calling ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, methodInfo, optionalParameterTypes).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <param name="methodName">The name of the method to be called.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.calli(System.Reflection.Emit.ILGenerator,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
            <summary>
            Calls the method indicated on the evaluation stack (as a pointer to an entry point) 
            with arguments described by a calling convention using an unmanaged calling convention
            by calling ILGenerator.EmitCalli(<see cref="F:System.Reflection.Emit.OpCodes.Calli"/>, <see cref="T:System.Runtime.InteropServices.CallingConvention"/>, Type, Type[]).
            </summary>
            <param name="il"/>
            <param name="unmanagedCallConv">The unmanaged calling convention to be used.</param>
            <param name="returnType">The Type of the result.</param>
            <param name="parameterTypes">The types of the required arguments to the instruction.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Calli">OpCodes.Calli</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">ILGenerator.EmitCalli</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.calli(System.Reflection.Emit.ILGenerator,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
            <summary>
            Calls the method indicated on the evaluation stack (as a pointer to an entry point)
            with arguments described by a calling convention using a managed calling convention
            by calling ILGenerator.EmitCalli(<see cref="F:System.Reflection.Emit.OpCodes.Calli"/>, <see cref="T:System.Runtime.InteropServices.CallingConvention"/>, Type, Type[], Type[]).
            </summary>
            <param name="il"/>
            <param name="callingConvention">The managed calling convention to be used.</param>
            <param name="returnType">The Type of the result.</param>
            <param name="parameterTypes">The types of the required arguments to the instruction.</param>
            <param name="optionalParameterTypes">The types of the optional arguments for vararg calls.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Calli">OpCodes.Calli</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">ILGenerator.EmitCalli</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.callvirt(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls a late-bound method on an object, pushing the return value onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo).
            </summary>
            <param name="il"/>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.callvirt(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Calls a late-bound method on an object, pushing the return value onto the evaluation stack
            by calling ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo, optionalParameterTypes).
            </summary>
            <param name="il"/>
            <param name="methodInfo">The method to be called.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.callvirt(System.Reflection.Emit.ILGenerator,System.Type,System.String,System.Type[])">
            <summary>
            Calls a late-bound method on an object, pushing the return value onto the evaluation stack
            by calling ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo, optionalParameterTypes).
            </summary>
            <param name="il"/>
            <param name="methodName">The method to be called.</param>
            <param name="type">The declaring type of the method.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.callvirt(System.Reflection.Emit.ILGenerator,System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Calls a late-bound method on an object, pushing the return value onto the evaluation stack
            by calling ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo, optionalParameterTypes).
            </summary>
            <param name="il"/>
            <param name="methodName">The method to be called.</param>
            <param name="type">The declaring type of the method.</param>
            <param name="flags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.castclass(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Attempts to cast an object passed by reference to the specified class
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Castclass"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Castclass">OpCodes.Castclass</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.castType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Attempts to cast an object passed by reference to the specified class 
            or to unbox if the type is a value type.
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ceq(System.Reflection.Emit.ILGenerator)">
            <summary>
            Compares two values. If they are equal, the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ceq"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ceq">OpCodes.Ceq</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.cgt(System.Reflection.Emit.ILGenerator)">
            <summary>
            Compares two values. If the first value is greater than the second,
            the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cgt"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cgt">OpCodes.Cgt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.cgt_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Compares two unsigned or unordered values
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cgt_Un"/>).
            If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cgt_Un">OpCodes.Cgt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.constrained(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Constrains the type on which a virtual method call is made
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Constrained"/>).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cgt_Un">OpCodes.Constrained</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ckfinite(System.Reflection.Emit.ILGenerator)">
            <summary>
            Throws <see cref="T:System.ArithmeticException"/> if value is not a finite number
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ckfinite"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ckfinite">OpCodes.Ckfinite</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.clt(System.Reflection.Emit.ILGenerator)">
            <summary>
            Compares two values. If the first value is less than the second,
            the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Clt"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Clt">OpCodes.Clt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.clt_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Compares the unsigned or unordered values value1 and value2
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Clt_Un"/>).
            If value1 is less than value2, then the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Clt_Un">OpCodes.Clt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_i(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to natural int
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I">OpCodes.Conv_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_i1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to int8, then extends (pads) it to int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I1"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I1">OpCodes.Conv_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_i2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to int16, then extends (pads) it to int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I2"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I2">OpCodes.Conv_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_i4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I4">OpCodes.Conv_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_i8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to int64
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I8"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I8">OpCodes.Conv_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts the value on top of the evaluation stack to the specified type.
            </summary>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_i(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I"/>) that
            converts the signed value on top of the evaluation stack to signed natural int,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">OpCodes.Conv_Ovf_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_i1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1"/>) that
            converts the signed value on top of the evaluation stack to signed int8 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">OpCodes.Conv_Ovf_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_i1_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed int8 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">OpCodes.Conv_Ovf_I1_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_i2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2"/>) that
            converts the signed value on top of the evaluation stack to signed int16 and extending it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">OpCodes.Conv_Ovf_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_i2_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed int16 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">OpCodes.Conv_Ovf_I2_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_i4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the signed value on top of the evaluation tack to signed int32, throwing <see cref="T:System.OverflowException"/> on overflow
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">OpCodes.Conv_Ovf_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_i4_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on top of the evaluation stack to signed int32, throwing <see cref="T:System.OverflowException"/> on overflow
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">OpCodes.Conv_Ovf_I4_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_i8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8"/>) that
            converts the signed value on top of the evaluation stack to signed int64,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">OpCodes.Conv_Ovf_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_i8_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on top of the evaluation stack to signed int64, throwing <see cref="T:System.OverflowException"/> on overflow
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">OpCodes.Conv_Ovf_I8_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_i_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed natural int,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">OpCodes.Conv_Ovf_I_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_u(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U"/>) that
            converts the signed value on top of the evaluation stack to unsigned natural int,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">OpCodes.Conv_Ovf_U</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_u1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1"/>) that
            converts the signed value on top of the evaluation stack to unsigned int8 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">OpCodes.Conv_Ovf_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_u1_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned int8 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">OpCodes.Conv_Ovf_U1_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_u2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2"/>) that
            converts the signed value on top of the evaluation stack to unsigned int16 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">OpCodes.Conv_Ovf_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_u2_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned int16 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">OpCodes.Conv_Ovf_U2_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_u4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the signed value on top of the evaluation stack to unsigned int32, throwing <see cref="T:System.OverflowException"/> on overflow
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">OpCodes.Conv_Ovf_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_u4_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on top of the evaluation stack to unsigned int32, throwing <see cref="T:System.OverflowException"/> on overflow
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">OpCodes.Conv_Ovf_U4_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_u8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the signed value on top of the evaluation stack to unsigned int64, throwing <see cref="T:System.OverflowException"/> on overflow
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">OpCodes.Conv_Ovf_U8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_u8_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on top of the evaluation stack to unsigned int64, throwing <see cref="T:System.OverflowException"/> on overflow
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">OpCodes.Conv_Ovf_U8_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_ovf_u_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned natural int,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">OpCodes.Conv_Ovf_U_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_r4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to float32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_R4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_R4">OpCodes.Conv_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_r8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to float64
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_R8"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_R8">OpCodes.Conv_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_r_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned integer value on top of the evaluation stack to float32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_R_Un"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_R_Un">OpCodes.Conv_R_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_u(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to unsigned natural int, and extends it to natural int
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U">OpCodes.Conv_U</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_u1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to unsigned int8, and extends it to int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U1"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U1">OpCodes.Conv_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_u2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to unsigned int16, and extends it to int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U2"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U2">OpCodes.Conv_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_u4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to unsigned int32, and extends it to int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U4">OpCodes.Conv_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.conv_u8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to unsigned int64, and extends it to int64
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U8"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U8">OpCodes.Conv_U8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.cpblk(System.Reflection.Emit.ILGenerator)">
            <summary>
            Copies a specified number bytes from a source address to a destination address
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cpblk"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cpblk">OpCodes.Cpblk</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.cpobj(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Copies the value type located at the address of an object (type &amp;, * or natural int) 
            to the address of the destination object (type &amp;, * or natural int)
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cpobj"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cpobj">OpCodes.Cpobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.div(System.Reflection.Emit.ILGenerator)">
            <summary>
            Divides two values and pushes the result as a floating-point (type F) or
            quotient (type int32) onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Div"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Div">OpCodes.Div</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.div_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Divides two unsigned integer values and pushes the result (int32) onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Div_Un"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Div_Un">OpCodes.Div_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.dup(System.Reflection.Emit.ILGenerator)">
            <summary>
            Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Dup"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Dup">OpCodes.Dup</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.endfilter(System.Reflection.Emit.ILGenerator)">
            <summary>
            Transfers control from the filter clause of an exception back to
            the Common Language Infrastructure (CLI) exception handler
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Endfilter"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Endfilter">OpCodes.Endfilter</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.endfinally(System.Reflection.Emit.ILGenerator)">
            <summary>
            Transfers control from the fault or finally clause of an exception block back to
            the Common Language Infrastructure (CLI) exception handler
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Endfinally"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Endfinally">OpCodes.Endfinally</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.initblk(System.Reflection.Emit.ILGenerator)">
            <summary>
            Initializes a specified block of memory at a specific address to a given size and initial value
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Initblk"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Initblk">OpCodes.Initblk</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.initobj(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Initializes all the fields of the object at a specific address to a null reference or 
            a 0 of the appropriate primitive type
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Initobj"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Initobj">OpCodes.Initobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.isinst(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Tests whether an object reference (type O) is an instance of a particular class
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Isinst"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Isinst">OpCodes.Isinst</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.jmp(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Exits current method and jumps to specified method
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Jmp"/>, methodInfo).
            </summary>
            <param name="il"/>
            <param name="methodInfo">The method to be jumped.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Jmp">OpCodes.Jmp</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldarg(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads an argument (referenced by a specified index value) onto the stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg"/>, short).
            </summary>
            <param name="il"/>
            <param name="index">Index of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg">OpCodes.Ldarg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldargEx(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.MethodBuilder,System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Loads an argument onto the stack.
            </summary>
            <param name="il"/>
            <param name="methodBuilder">A <see cref="T:System.Reflection.Emit.MethodBuilder"/> of the current method.</param>
            <param name="parameterInfo">A <see cref="T:System.Reflection.ParameterInfo"/> representing a parameter.</param>
            <param name="box">True, if parameter must be converted to a reference.</param>
            <seealso cref="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldarg(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.MethodBuilder,System.Reflection.ParameterInfo)"/>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldarg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg"/>, short) or 
            ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_S"/>, byte) that
            loads an argument (referenced by a specified index value) onto the stack.
            </summary>
            <param name="il"/>
            <param name="index">Index of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg">OpCodes.Ldarg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldarg(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.MethodBuilder,System.Reflection.ParameterInfo)">
            <summary>
            Loads an argument onto the stack.
            </summary>
            <param name="il"/>
            <param name="methodBuilder">A <see cref="T:System.Reflection.Emit.MethodBuilder"/> of the current method.</param>
            <param name="parameterInfo">A <see cref="T:System.Reflection.ParameterInfo"/> representing a parameter.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldarga(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Load an argument address onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarga"/>, short).
            </summary>
            <param name="il"/>
            <param name="index">Index of the address addr of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarga">OpCodes.Ldarga</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldarga_s(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Load an argument address, in short form, onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarga_S"/>, byte).
            </summary>
            <param name="il"/>
            <param name="index">Index of the address addr of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarga_S">OpCodes.Ldarga_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldarga(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Load an argument address onto the evaluation stack.
            </summary>
            <param name="il"/>
            <param name="index">Index of the address addr of the argument that is pushed onto the stack.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldarga(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.MethodBuilder,System.Reflection.ParameterInfo)">
            <summary>
            Loads an argument address onto the stack.
            </summary>
            <param name="il"/>
            <param name="methodBuilder">A <see cref="T:System.Reflection.Emit.MethodBuilder"/> of the current method.</param>
            <param name="parameterInfo">A <see cref="T:System.Reflection.ParameterInfo"/> representing a parameter.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldarg_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 0 onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_0"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_0">OpCodes.Ldarg_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldarg_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 1 onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_1"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_1">OpCodes.Ldarg_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldarg_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 2 onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_2"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_2">OpCodes.Ldarg_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldarg_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 3 onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_3"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_3">OpCodes.Ldarg_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldarg_s(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Loads the argument (referenced by a specified short form index) onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_S"/>, byte).
            </summary>
            <param name="il"/>
            <param name="index">Index of the argument value that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_S">OpCodes.Ldarg_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_bool(System.Reflection.Emit.ILGenerator,System.Boolean)">
            <summary>
            Pushes a supplied value of type int32 onto the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_0"/> or <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_1"/>).
            </summary>
            <param name="il"/>
            <param name="b">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4">OpCodes.Ldc_I4_0</seealso>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4">OpCodes.Ldc_I4_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i4(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Pushes a supplied value of type int32 onto the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4"/>, int).
            </summary>
            <param name="il"/>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4">OpCodes.Ldc_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i4_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 0 onto the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_0"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">OpCodes.Ldc_I4_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i4_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 1 onto the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_1"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">OpCodes.Ldc_I4_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i4_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 2 onto the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_2"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">OpCodes.Ldc_I4_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i4_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 3 onto the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_3"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">OpCodes.Ldc_I4_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i4_4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 4 onto the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">OpCodes.Ldc_I4_4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i4_5(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 5 onto the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_5"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">OpCodes.Ldc_I4_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i4_6(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 6 onto the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_6"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">OpCodes.Ldc_I4_6</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i4_7(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 7 onto the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_7"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">OpCodes.Ldc_I4_7</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i4_8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 8 onto the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_8"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">OpCodes.Ldc_I4_8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i4_m1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of -1 onto the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">OpCodes.Ldc_I4_M1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i4_(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Pushes the integer value of -1 onto the evaluation stack as an int32
            by calling the best form of ILGenerator.Emit(Ldc_I4_X).
            </summary>
            <seealso cref="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i4(System.Reflection.Emit.ILGenerator,System.Int32)"/>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i4_s(System.Reflection.Emit.ILGenerator,System.SByte)">
            <summary>
            Pushes the supplied int8 value onto the evaluation stack as an int32, short form
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_S"/>, byte).
            </summary>
            <param name="il"/>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">OpCodes.Ldc_I4_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_i8(System.Reflection.Emit.ILGenerator,System.Int64)">
            <summary>
            Pushes a supplied value of type int64 onto the evaluation stack as an int64
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I8"/>, long).
            </summary>
            <param name="il"/>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I8">OpCodes.Ldc_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_r4(System.Reflection.Emit.ILGenerator,System.Single)">
            <summary>
            Pushes a supplied value of type float32 onto the evaluation stack as type F (float)
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_R4"/>, float).
            </summary>
            <param name="il"/>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_R4">OpCodes.Ldc_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldc_r8(System.Reflection.Emit.ILGenerator,System.Double)">
            <summary>
            Pushes a supplied value of type float64 onto the evaluation stack as type F (float)
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_R8"/>, double).
            </summary>
            <param name="il"/>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_R8">OpCodes.Ldc_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldelema(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Loads the address of the array element at a specified array index onto the top of the evaluation stack 
            as type &amp; (managed pointer)
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelema"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelema">OpCodes.Ldelema</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldelem_i(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the element with type natural int at a specified array index onto the top of the evaluation stack 
            as a natural int
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I">OpCodes.Ldelem_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldelem_i1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the element with type int8 at a specified array index onto the top of the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I1"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I1">OpCodes.Ldelem_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldelem_i2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the element with type int16 at a specified array index onto the top of the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I2"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I2">OpCodes.Ldelem_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldelem_i4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the element with type int32 at a specified array index onto the top of the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I4">OpCodes.Ldelem_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldelem_i8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the element with type int64 at a specified array index onto the top of the evaluation stack as an int64
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I8"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I8">OpCodes.Ldelem_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldelem_r4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the element with type float32 at a specified array index onto the top of the evaluation stack as type F (float)
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_R4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_R4">OpCodes.Ldelem_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldelem_r8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the element with type float64 at a specified array index onto the top of the evaluation stack as type F (float)
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_R8"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_R8">OpCodes.Ldelem_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldelem_ref(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the element containing an object reference at a specified array index 
            onto the top of the evaluation stack as type O (object reference)
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_Ref"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">OpCodes.Ldelem_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldelem_u1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the element with type unsigned int8 at a specified array index onto the top of the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U1"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_U1">OpCodes.Ldelem_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldelem_u2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the element with type unsigned int16 at a specified array index 
            onto the top of the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U2"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_U2">OpCodes.Ldelem_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldelem_u4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the element with type unsigned int32 at a specified array index 
            onto the top of the evaluation stack as an int32
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_U4">OpCodes.Ldelem_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Finds the value of a field in the object whose reference is currently on the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldfld"/>, fieldInfo).
            </summary>
            <param name="il"/>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldfld">OpCodes.Ldfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldflda(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Finds the address of a field in the object whose reference is currently on the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldflda"/>, fieldInfo).
            </summary>
            <param name="il"/>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldflda">OpCodes.Ldflda</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldftn(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Pushes an unmanaged pointer (type natural int) to the native code implementing a specific method 
            onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldftn"/>, methodInfo).
            </summary>
            <param name="il"/>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldftn">OpCodes.Ldftn</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldind_i(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads a value of type natural int as a natural int onto the evaluation stack indirectly
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I">OpCodes.Ldind_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldind_i1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads a value of type int8 as an int32 onto the evaluation stack indirectly
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I1"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I1">OpCodes.Ldind_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldind_i2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads a value of type int16 as an int32 onto the evaluation stack indirectly
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I2"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I2">OpCodes.Ldind_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldind_i4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads a value of type int32 as an int32 onto the evaluation stack indirectly
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I4">OpCodes.Ldind_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldind_i8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads a value of type int64 as an int64 onto the evaluation stack indirectly
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I8"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I8">OpCodes.Ldind_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldind_r4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads a value of type float32 as a type F (float) onto the evaluation stack indirectly
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_R4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_R4">OpCodes.Ldind_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldind_r8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads a value of type float64 as a type F (float) onto the evaluation stack indirectly
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_R8"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_R8">OpCodes.Ldind_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldind_ref(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads an object reference as a type O (object reference) onto the evaluation stack indirectly
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_Ref"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_Ref">OpCodes.Ldind_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldind_u1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads a value of type unsigned int8 as an int32 onto the evaluation stack indirectly
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_U1"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_U1">OpCodes.Ldind_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldind_u2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads a value of type unsigned int16 as an int32 onto the evaluation stack indirectly
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_U2"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_U2">OpCodes.Ldind_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldind_u4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads a value of type unsigned int32 as an int32 onto the evaluation stack indirectly
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_U4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_U4">OpCodes.Ldind_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldind(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Loads a value of the type from a supplied address.
            </summary>
            <param name="il"/>
            <param name="type">A Type.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldlen(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldlen"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldlen">OpCodes.Ldlen</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldloc(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Load an argument address onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc"/>, short).
            </summary>
            <param name="il"/>
            <param name="index">Index of the local variable value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc">OpCodes.Ldloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldloc(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Load an argument address onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc"/>, <see cref="T:System.Reflection.Emit.LocalBuilder"/>).
            </summary>
            <param name="il"/>
            <param name="localBuilder">Local variable builder.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc">OpCodes.Ldloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldloca(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads the address of the local variable at a specific index onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloca"/>, short).
            </summary>
            <param name="il"/>
            <param name="index">Index of the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloca">OpCodes.Ldloca</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldloca_s(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Loads the address of the local variable at a specific index onto the evaluation stack, short form
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloca_S"/>, byte).
            </summary>
            <param name="il"/>
            <param name="index">Index of the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloca_S">OpCodes.Ldloca_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldloca(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Loads the address of the local variable at a specific index onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloca"/>, <see cref="T:System.Reflection.Emit.LocalBuilder"/>).
            </summary>
            <param name="il"/>
            <param name="local">A <see cref="T:System.Reflection.Emit.LocalBuilder"/> representing the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloca">OpCodes.Ldloca</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldloc_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the local variable at index 0 onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_0"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_0">OpCodes.Ldloc_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldloc_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the local variable at index 1 onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_1"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_1">OpCodes.Ldloc_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldloc_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the local variable at index 2 onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_2"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_2">OpCodes.Ldloc_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldloc_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the local variable at index 3 onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_3"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_3">OpCodes.Ldloc_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldloc_s(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Loads the local variable at a specific index onto the evaluation stack, short form
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_S"/>, byte).
            </summary>
            <param name="il"/>
            <param name="index">Index of the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_S">OpCodes.Ldloc_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldnull(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes a null reference (type O) onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldnull"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldnull">OpCodes.Ldnull</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldobj(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Copies the value type object pointed to by an address to the top of the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldobj"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldobj">OpCodes.Ldobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldsfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Pushes the value of a static field onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldsfld"/>, fieldInfo).
            </summary>
            <param name="il"/>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldsfld">OpCodes.Ldsfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldsflda(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Pushes the address of a static field onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldsflda"/>, fieldInfo).
            </summary>
            <param name="il"/>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldsflda">OpCodes.Ldsflda</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldstrEx(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            Calls <see cref="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldstr(System.Reflection.Emit.ILGenerator,System.String)"/> -or- <see cref="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldnull(System.Reflection.Emit.ILGenerator)"/>,
            if given string is a null reference.
            </summary>
            <param name="il"/>
            <param name="str">The String to be emitted.</param>
            <seealso cref="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldstr(System.Reflection.Emit.ILGenerator,System.String)"/>
            <seealso cref="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldnull(System.Reflection.Emit.ILGenerator)"/>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldstr(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            Pushes a new object reference to a string literal stored in the metadata
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldstr"/>, string).
            </summary>
            <param name="il"/>
            <param name="str">The String to be emitted.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldstr">OpCodes.Ldstr</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldtoken(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Converts a metadata token to its runtime representation, pushing it onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken"/>, methodInfo).
            </summary>
            <param name="il"/>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldtoken">OpCodes.Ldtoken</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldtoken(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Converts a metadata token to its runtime representation, 
            pushing it onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken"/>, fieldInfo).
            </summary>
            <param name="il"/>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldtoken">OpCodes.Ldtoken</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldtoken(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts a metadata token to its runtime representation, pushing it onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldtoken">OpCodes.Ldtoken</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ldvirtftn(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Pushes an unmanaged pointer (type natural int) to the native code implementing a particular virtual method 
            associated with a specified object onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldvirtftn"/>, methodInfo).
            </summary>
            <param name="il"/>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldvirtftn">OpCodes.Ldvirtftn</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.leave(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Exits a protected region of code, unconditionally tranferring control to a specific target instruction
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Leave"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Leave">OpCodes.Leave</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.leave_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Exits a protected region of code, unconditionally transferring control to a target instruction (short form)
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Leave_S"/>, label).
            </summary>
            <param name="il"/>
            <param name="label">The label.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Leave_S">OpCodes.Leave_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.localloc(System.Reflection.Emit.ILGenerator)">
            <summary>
            Allocates a certain number of bytes from the local dynamic memory pool and pushes the address 
            (a transient pointer, type *) of the first allocated byte onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Localloc"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Localloc">OpCodes.Localloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.mkrefany(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Pushes a typed reference to an instance of a specific type onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mkrefany"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mkrefany">OpCodes.Mkrefany</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.mul(System.Reflection.Emit.ILGenerator)">
            <summary>
            Multiplies two values and pushes the result on the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mul"/>).
            (a transient pointer, type *) of the first allocated byte onto the evaluation stack.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mul">OpCodes.Mul</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.mul_ovf(System.Reflection.Emit.ILGenerator)">
            <summary>
            Multiplies two integer values, performs an overflow check, 
            and pushes the result onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf">OpCodes.Mul_Ovf</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.mul_ovf_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Multiplies two unsigned integer values, performs an overflow check, 
            and pushes the result onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">OpCodes.Mul_Ovf_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.neg(System.Reflection.Emit.ILGenerator)">
            <summary>
            Negates a value and pushes the result onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Neg"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Neg">OpCodes.Neg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.newarr(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Pushes an object reference to a new zero-based, one-dimensional array whose elements 
            are of a specific type onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Newarr"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Newarr">OpCodes.Newarr</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.newobj(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new object or a new instance of a value type,
            pushing an object reference (type O) onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Newobj"/>, <see cref="T:System.Reflection.ConstructorInfo"/>).
            </summary>
            <param name="il"/>
            <param name="constructorInfo">A <see cref="T:System.Reflection.ConstructorInfo"/> representing a constructor.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Newobj">OpCodes.Newobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.newobj(System.Reflection.Emit.ILGenerator,System.Type,System.Type[])">
            <summary>
            Creates a new object or a new instance of a value type,
            pushing an object reference (type O) onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Newobj"/>, ConstructorInfo).
            </summary>
            <param name="il"/>
            <param name="type">A type.</param>
            <param name="parameters">An array of System.Type objects representing
            the number, order, and type of the parameters for the desired constructor.
            -or- An empty array of System.Type objects, to get a constructor that takes
            no parameters. Such an empty array is provided by the static field System.Type.EmptyTypes.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.nop(System.Reflection.Emit.ILGenerator)">
            <summary>
            Fills space if opcodes are patched. No meaningful operation is performed although 
            a processing cycle can be consumed
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Nop"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Nop">OpCodes.Nop</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.not(System.Reflection.Emit.ILGenerator)">
            <summary>
            Computes the bitwise complement of the integer value on top of the stack 
            and pushes the result onto the evaluation stack as the same type
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Not"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Not">OpCodes.Not</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.or(System.Reflection.Emit.ILGenerator)">
            <summary>
            Compute the bitwise complement of the two integer values on top of the stack and 
            pushes the result onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Or"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Or">OpCodes.Or</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.pop(System.Reflection.Emit.ILGenerator)">
            <summary>
            Removes the value currently on top of the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Pop"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Pop">OpCodes.Pop</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.readonly(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Refanytype"/>) that
            specifies that the subsequent array address operation performs
            no type check at run time, and that it returns a managed pointer
            whose mutability is restricted.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Refanytype">OpCodes.Refanytype</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.refanytype(System.Reflection.Emit.ILGenerator)">
            <summary>
            Retrieves the type token embedded in a typed reference
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Refanytype"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Refanytype">OpCodes.Refanytype</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.refanyval(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Retrieves the address (type &amp;) embedded in a typed reference
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Refanyval"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Refanyval">OpCodes.Refanyval</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.rem(System.Reflection.Emit.ILGenerator)">
            <summary>
            Divides two values and pushes the remainder onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Rem"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Rem">OpCodes.Rem</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.rem_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Divides two unsigned values and pushes the remainder onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Rem_Un"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Rem_Un">OpCodes.Rem_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.ret(System.Reflection.Emit.ILGenerator)">
            <summary>
            Returns from the current method, pushing a return value (if present) 
            from the caller's evaluation stack onto the callee's evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ret"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ret">OpCodes.Ret</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.rethrow(System.Reflection.Emit.ILGenerator)">
            <summary>
            Rethrows the current exception
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Rethrow"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Rethrow">OpCodes.Rethrow</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.shl(System.Reflection.Emit.ILGenerator)">
            <summary>
            Shifts an integer value to the left (in zeroes) by a specified number of bits,
            pushing the result onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Shl"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Shl">OpCodes.Shl</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.shr(System.Reflection.Emit.ILGenerator)">
            <summary>
            Shifts an integer value (in sign) to the right by a specified number of bits,
            pushing the result onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Shr"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Shr">OpCodes.Shr</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.shr_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits,
            pushing the result onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Shr_Un"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Shr_Un">OpCodes.Shr_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.sizeof(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Pushes the size, in bytes, of a supplied value type onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sizeof"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sizeof">OpCodes.Sizeof</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.starg(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Stores the value on top of the evaluation stack in the argument slot at a specified index
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Starg"/>, short).
            </summary>
            <param name="il"/>
            <param name="index">Slot index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Starg">OpCodes.Starg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.starg_s(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Stores the value on top of the evaluation stack in the argument slot at a specified index,
            short form
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Starg_S"/>, byte).
            </summary>
            <param name="il"/>
            <param name="index">Slot index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Starg_S">OpCodes.Starg_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.starg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Stores the value on top of the evaluation stack in the argument slot at a specified index.
            </summary>
            <param name="il"/>
            <param name="index">Slot index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Starg">OpCodes.Starg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stelem_i(System.Reflection.Emit.ILGenerator)">
            <summary>
            Replaces the array element at a given index with the natural int value 
            on the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I">OpCodes.Stelem_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stelem_i1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Replaces the array element at a given index with the int8 value on the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I1"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I1">OpCodes.Stelem_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stelem_i2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Replaces the array element at a given index with the int16 value on the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I2"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I2">OpCodes.Stelem_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stelem_i4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Replaces the array element at a given index with the int32 value on the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I4">OpCodes.Stelem_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stelem_i8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Replaces the array element at a given index with the int64 value on the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I8"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I8">OpCodes.Stelem_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stelem_r4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Replaces the array element at a given index with the float32 value on the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_R4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_R4">OpCodes.Stelem_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stelem_r8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Replaces the array element at a given index with the float64 value on the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_R8"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_R8">OpCodes.Stelem_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stelem_ref(System.Reflection.Emit.ILGenerator)">
            <summary>
            Replaces the array element at a given index with the object ref value (type O)
            on the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_Ref"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_Ref">OpCodes.Stelem_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Replaces the value stored in the field of an object reference or pointer with a new value
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stfld"/>, <see cref="T:System.Reflection.FieldInfo"/>).
            </summary>
            <param name="il"/>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stfld">OpCodes.Stfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stind_i(System.Reflection.Emit.ILGenerator)">
            <summary>
            Stores a value of type natural int at a supplied address
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I">OpCodes.Stind_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stind_i1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Stores a value of type int8 at a supplied address
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I1"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I1">OpCodes.Stind_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stind_i2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Stores a value of type int16 at a supplied address
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I2"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I2">OpCodes.Stind_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stind_i4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Stores a value of type int32 at a supplied address
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I4">OpCodes.Stind_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stind_i8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Stores a value of type int64 at a supplied address
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I8"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I8">OpCodes.Stind_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stind_r4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Stores a value of type float32 at a supplied address
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_R4"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_R4">OpCodes.Stind_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stind_r8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Stores a value of type float64 at a supplied address
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_R8"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_R8">OpCodes.Stind_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stind_ref(System.Reflection.Emit.ILGenerator)">
            <summary>
            Stores an object reference value at a supplied address
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_Ref"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_Ref">OpCodes.Stind_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stind(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Stores a value of the type at a supplied address.
            </summary>
            <param name="il"/>
            <param name="type">A Type.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stloc(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at a specified index
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc"/>, <see cref="T:System.Reflection.Emit.LocalBuilder"/>).
            </summary>
            <param name="il"/>
            <param name="local">A local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc">OpCodes.Stloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stloc(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at a specified index
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc"/>, short).
            </summary>
            <param name="il"/>
            <param name="index">A local variable index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc">OpCodes.Stloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stloc_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 0
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_0"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_0">OpCodes.Stloc_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stloc_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 1
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_1"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_1">OpCodes.Stloc_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stloc_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 2
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_2"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_2">OpCodes.Stloc_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stloc_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 3
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_3"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_3">OpCodes.Stloc_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stloc_s(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index (short form)
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_S"/>, <see cref="T:System.Reflection.Emit.LocalBuilder"/>).
            </summary>
            <param name="il"/>
            <param name="local">A local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_S">OpCodes.Stloc_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stloc_s(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index (short form)
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_S"/>, byte).
            </summary>
            <param name="il"/>
            <param name="index">A local variable index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_S">OpCodes.Stloc_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stobj(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Copies a value of a specified type from the evaluation stack into a supplied memory address
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stobj"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stobj">OpCodes.Stobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.stsfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Replaces the value of a static field with a value from the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stsfld"/>, fieldInfo).
            </summary>
            <param name="il"/>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stsfld">OpCodes.Stsfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.sub(System.Reflection.Emit.ILGenerator)">
            <summary>
            Subtracts one value from another and pushes the result onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sub"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sub">OpCodes.Sub</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.sub_ovf(System.Reflection.Emit.ILGenerator)">
            <summary>
            Subtracts one integer value from another, performs an overflow check,
            and pushes the result onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf">OpCodes.Sub_Ovf</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.sub_ovf_un(System.Reflection.Emit.ILGenerator)">
            <summary>
            Subtracts one unsigned integer value from another, performs an overflow check,
            and pushes the result onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">OpCodes.Sub_Ovf_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.switch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label[])">
            <summary>
            Implements a jump table
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Switch"/>, label[]).
            </summary>
            <param name="il"/>
            <param name="labels">The array of label objects to which to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Switch">OpCodes.Switch</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.tailcall(System.Reflection.Emit.ILGenerator)">
            <summary>
            Performs a postfixed method call instruction such that the current method's stack frame 
            is removed before the actual call instruction is executed
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Tailcall"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Tailcall">OpCodes.Tailcall</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.throw(System.Reflection.Emit.ILGenerator)">
            <summary>
            Throws the exception object currently on the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Throw"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Throw">OpCodes.Throw</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.unaligned(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unaligned"/>, label) that
            indicates that an address currently atop the evaluation stack might not be aligned 
            to the natural size of the immediately following ldind, stind, ldfld, stfld, ldobj, stobj, 
            initblk, or cpblk instruction.
            </summary>
            <param name="il"/>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unaligned">OpCodes.Unaligned</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.unaligned(System.Reflection.Emit.ILGenerator,System.Int64)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unaligned"/>, long) that
            indicates that an address currently atop the evaluation stack might not be aligned 
            to the natural size of the immediately following ldind, stind, ldfld, stfld, ldobj, stobj, 
            initblk, or cpblk instruction.
            </summary>
            <param name="il"/>
            <param name="addr">An address is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unaligned">OpCodes.Unaligned</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.unbox(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts the boxed representation of a value type to its unboxed form
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unbox"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unbox">OpCodes.Unbox</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.unbox_any(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts the boxed representation of a value type to its unboxed form
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unbox_Any"/>, type).
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unbox_Any">OpCodes.Unbox_Any</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.unboxIfValueType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Calls <see cref="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.unbox_any(System.Reflection.Emit.ILGenerator,System.Type)"/> if given type is a value type.
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unbox_Any">OpCodes.Unbox</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.volatile(System.Reflection.Emit.ILGenerator)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Volatile"/>) that
            specifies that an address currently atop the evaluation stack might be volatile, 
            and the results of reading that location cannot be cached or that multiple stores 
            to that location cannot be suppressed.
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Volatile">OpCodes.Volatile</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.xor(System.Reflection.Emit.ILGenerator)">
            <summary>
            Computes the bitwise XOR of the top two values on the evaluation stack, 
            pushing the result onto the evaluation stack
            by calling ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Xor"/>).
            </summary>
            <param name="il"/>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Xor">OpCodes.Xor</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.LoadInitValue(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Loads default value of given type onto the evaluation stack.
            </summary>
            <param name="il"/>
            <param name="type">A Type</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.LoadWellKnownValue(System.Reflection.Emit.ILGenerator,System.Object)">
            <summary>
            Loads supplied object value (if possible) onto the evaluation stack.
            </summary>
            <param name="il"/>
            <param name="o">Any object instance or null reference.</param>
            <returns>True is a value was loaded, otherwise false.</returns>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.Init(System.Reflection.Emit.ILGenerator,System.Reflection.ParameterInfo,System.Int32)">
            <summary>
            Initialize parameter with some default value.
            </summary>
            <param name="il"/>
            <param name="parameterInfo">A method parameter.</param>
            <param name="index">The parameter index.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.InitOutParameters(System.Reflection.Emit.ILGenerator,System.Reflection.ParameterInfo[])">
            <summary>
            Initialize all output parameters with some default value.
            </summary>
            <param name="il"/>
            <param name="parameters">A method parameters array.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.Init(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Initialize local variable with some default value.
            </summary>
            <param name="il"/>
            <param name="localBuilder">A method local variable.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.LoadType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Loads a type instance at runtime.
            </summary>
            <param name="il"/>
            <param name="type">A type</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.LoadField(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Loads a field instance at runtime.
            </summary>
            <param name="il"/>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.CastFromObject(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Cast an object passed by reference to the specified type
            or unbox a boxed value type.
            </summary>
            <param name="il"/>
            <param name="type">A type</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.CastIfNecessary(System.Reflection.Emit.ILGenerator,System.Type,System.Type)">
            <summary>
            Cast an object passed by reference to the specified type
            or unbox a boxed value type unless <paramref name="expectedType"/>
            is a parent of <paramref name="actualType"/>.
            </summary>
            <param name="il"/>
            <param name="expectedType">A type required.</param>
            <param name="actualType">A type available.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.ILGeneratorExtensions.AddMaxStackSize(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Increase max stack size by specified delta.
            </summary>
            <param name="il"/>
            <param name="size">Number of bytes to enlarge max stack size.</param>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionAttribute"/>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionType"/>
        </member>
        <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
            <summary>
            Initializes new instance of AssertionConditionAttribute
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is delegate, indicates that delegate is executed while the method is executed.
            If the parameter is enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.TypeSpec.DefaultFullTypeResolver(NYurik.TimeSeriesDb.Common.TypeSpec,System.Func{NYurik.TimeSeriesDb.Common.TypeSpec,System.Reflection.AssemblyName,System.Type}[])">
            <summary>
            Resolves TypeSpec into a specific type (including subtypes and generic parameters)
            </summary>
            <param name="spec">Type info with all generics already resolved</param>
            <param name="typeResolvers">Resolver to convert a specific type without generic parameters and without subtypes</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.Utils.BinarySearch``1(``0,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Func{System.Int64,``0})">
            <summary>
            Using binary search locate value in any data structure using accessor.
            For non-unique sequences, if found more than one identical value, will return position of the first.
            </summary>
            <typeparam name="TInd"> Type of the index, must be comparable </typeparam>
            <param name="value"> Value to find </param>
            <param name="start"> First position to look at </param>
            <param name="count"> Number of elements to look at </param>
            <param name="uniqueIndexes"> If true, return first found position, otherwise will find the first one </param>
            <param name="inReverse"> True if the sequence is sorted in decreasing order </param>
            <param name="getValueAt"> Function to get value at a given position </param>
            <returns> Position of the first found value, or bitwise-NOT of the position it should be at. </returns>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.Utils.CopyMemory(System.Byte*,System.Byte*,System.UInt32)">
            <summary>
            Fast memory copying - copies in blocks of 32 bytes, using either int or long (on 64bit machines)
            Calling the native RtlMemoryMove was slower
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Common.Utils.CompareMemory(System.Byte*,System.Byte*,System.UInt32)">
            <summary>
              Fast memory comparison - compares in blocks of 32 bytes, using either int or long (on 64bit machines)
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.IGenericCallable2`2">
            <summary>
            This interface is used to run a generic method without referencing two generic subtypes
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.DynamicFeed`2">
            <summary>
            Helper class that allows factory-based feed creation and custom disposal.
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.BinSeriesFile">
            <summary>
            Helper non-generic class aids in creating a new instance of <see cref="T:NYurik.TimeSeriesDb.BinSeriesFile`2"/>.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinSeriesFile.GenericNew(System.Type,System.Type,System.String,System.Reflection.FieldInfo)">
            <summary>
            Uses reflection to create an instance of <see cref="T:NYurik.TimeSeriesDb.BinSeriesFile`2"/>.
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.BinSeriesFile`2">
            <summary>
            Object representing a binary-serialized index-based series file.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinSeriesFile`2.#ctor">
            <summary>
            Allow Activator non-public instantiation
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinSeriesFile`2.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Create new timeseries file. If the file already exists, an <see cref="T:System.IO.IOException"/> is thrown.
            </summary>
            <param name="fileName">A relative or absolute path for the file to create.</param>
            <param name="indexFieldInfo">Field containing the TInd index, or null to get default</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinSeriesFile`2.BinarySearch(`0)">
            <summary>
            Search for the first occurence of the index in the file
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinSeriesFile`2.TruncateFile(`0)">
            <summary>
            Truncate file, making sure that no items exist with <paramref name="deleteOnAndAfter"/> index or greater.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinSeriesFile`2.ProcessWriteStream(System.Collections.Generic.IEnumerable{System.ArraySegment{`1}},System.Boolean)">
            <summary>
            Add new items at the end of the existing file
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.BinSeriesFile`2.BinarySearchCacheSize">
            <summary> Number of binary search lookups to cache. 0-internal defaults, negative-disable </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.BinSeriesFile`2.IndexAccessor">
            <summary>
            A delegate to a function that extracts index of a given item
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.IGenericCallable`2">
            <summary>
            This interface is used to run a generic method without referencing the generic subtype
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.Serializers.BinarySerializerAttribute">
            <summary>
            Use this attribute to specify custom <see cref="T:NYurik.TimeSeriesDb.IBinSerializer"/> for this type
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.BinIndexedFile`1">
            <summary>
            Very simple 0-based int64 index implementation
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinIndexedFile`1.#ctor">
            <summary>
            Allow Activator non-public instantiation
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinIndexedFile`1.#ctor(System.String)">
            <summary>
            Create new timeseries file. If the file already exists, an <see cref="T:System.IO.IOException"/> is thrown.
            </summary>
            <param name="fileName">A relative or absolute path for the file to create.
              If less than a day, the day must be evenly divisible by this value</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinIndexedFile`1.StreamSegments(System.Int64,System.Boolean,System.Collections.Generic.IEnumerable{NYurik.TimeSeriesDb.Buffer{`0}},System.Int64)">
            <summary>
            Enumerate items by block either in order or in reverse order, begining at the <paramref name="firstItemIdx"/>.
            </summary>
            <param name="firstItemIdx">The index of the first block to read (both forward and backward). Invalid values will be adjusted to existing data.</param>
            <param name="enumerateInReverse">Set to true to enumerate in reverse, false otherwise</param>
            <param name="bufferProvider">Provides buffers (or re-yields the same buffer) for each new result. Could be null for automatic</param>
            <param name="maxItemCount"></param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.BinIndexedFile`1.WriteStream(System.Collections.Generic.IEnumerable{System.ArraySegment{`0}},System.Int64)">
            <summary>
            Write segment stream to internal stream, optionally truncating the file so that <paramref name="firstItemIdx"/> would be the first written item.
            </summary>
            <param name="stream">The stream of array segments to write</param>
            <param name="firstItemIdx">The index of the first element in the stream. The file will be truncated if the value is less than or equal to Count</param>
        </member>
        <member name="T:NYurik.TimeSeriesDb.IBinSerializer">
            <summary>
            Methods to support binary data serialization into either a FileStream or into memory.
            Must not be implemented directly. Implement <see cref="T:NYurik.TimeSeriesDb.IBinSerializer`1"/> instead.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.IBinSerializer.InitNew(System.IO.BinaryWriter)">
            <summary>
            Save this serializer's parameters to a binary writer. Must match all actions by <see cref="M:NYurik.TimeSeriesDb.IBinSerializer.InitExisting(System.IO.BinaryReader,System.Func{System.String,System.Type})"/>
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.IBinSerializer.InitExisting(System.IO.BinaryReader,System.Func{System.String,System.Type})">
            <summary>
            When creating serializer from a stream, load internal values. Must match all actions by <see cref="M:NYurik.TimeSeriesDb.IBinSerializer.InitNew(System.IO.BinaryWriter)"/>
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinSerializer.Version">
            <summary> Serializer version </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinSerializer.TypeSize">
            <summary> The size of each data element </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinSerializer.ItemType">
            <summary>
            Get the type of items this serializer will process
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.IBinSerializer.SupportsMemoryPtrOperations">
            <summary>
            Will be set to true when this provider supports reading and writing to native memory (e.g. memory mapped file)
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.IBinSerializer`1">
            <summary>
            Methods to support binary data serialization into either a FileStream or into memory.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.IBinSerializer`1.ProcessFileStream(System.IO.FileStream,System.ArraySegment{`0},System.Boolean)">
            <summary>
            Read or write all items from/to <paramref name="fileStream"/> 
            into/from <paramref name="buffer"/>.
            </summary>
            <param name="fileStream">FileStream already positioned at the point in the file from which to begin</param>
            <param name="buffer">Buffer to fill with/read from values</param>
            <param name="isWriting">True when buffer should be written into a file, false - when reading into the buffer</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.IBinSerializer`1.ProcessMemoryPtr(System.IntPtr,System.ArraySegment{`0},System.Boolean)">
            <summary>
            Read/Write items from/to the memory pointer <paramref name="memPointer"/> into/from <paramref name="buffer"/>
            </summary>
            <param name="memPointer">A pointer to unmanaged memory (e.g. mapped to the file)</param>
            <param name="buffer">Buffer to fill with/read from values</param>
            <param name="isWriting">True when buffer should be written into a file, false - when reading into the buffer</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.IBinSerializer`1.BinaryArrayCompare(System.ArraySegment{`0},System.ArraySegment{`0})">
            <summary>
            Compare the elements of <paramref name="buffer1"/> with <paramref name="buffer2"/>, and returns true if they are the same
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.Serializers.BlockSerializer.ScaledDeltaBaseField.DeltaType">
            <summary> When the field value can only increase or only decrease, set this value to store deltas as unsigned integer.
            This results in some storage space gains - for instance a delta between 64 and 127 will now need 1 byte instead of 2.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.ScaledDeltaIntField.#ctor(NYurik.TimeSeriesDb.Serializers.BlockSerializer.IStateStore,System.Type,System.String)">
            <summary>
            Integer and Float delta serializer.
            </summary>
            <param name="stateStore">Serializer with the state</param>
            <param name="fieldType">Type of value to store</param>
            <param name="stateName">Name of the value (for debugging)</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.ScaledDeltaIntField.StateToValue(System.Linq.Expressions.Expression)">
            <summary>
            valueGetter: (T)state * divider
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.Serializers.BlockSerializer.ScaledDeltaIntField.Divider">
            <summary> Value is divided by this parameter before storage </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.IStateStore.GetOrCreateStateVar(System.String,System.Type,System.Boolean@)">
            <summary>
            Get a state variable expression of a given type by its name.
            In case the variable has not been created before, wasCreated will be set to true,
            in which case the caller must generate code to initialize it first.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.IStateStore.CreateField(System.Type,System.String,System.Boolean)">
            <summary>
            Create a default Field for the given type. The resulting field might be incomplete,
            and will throw exception on initialization unless configured properly.
            In case of the complex type, a <see cref="T:NYurik.TimeSeriesDb.Serializers.BlockSerializer.ComplexField"/> is created recursivelly.
            </summary>
            <param name="valueType">Type of the variable</param>
            <param name="name">State name</param>
            <param name="allowCustom">If true, do not call custom field factory.
            This parameter is needed to avoid infinite recursion by custom field fatories.
            If <see cref="T:NYurik.TimeSeriesDb.Serializers.BlockSerializer.DynamicSerializer`1"/> is created with a non-null factory, and that factory needs
            to create a default field before customizing it, set this parameter to false.</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.DynamicSerializer.CreateFieldWithCtor(System.Type,System.Type,System.String)">
            <summary>
            Create field using common 3 parameter constructor (IStateStore, Type, string)
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.DynamicSerializer`1.GenerateSerializer(System.Linq.Expressions.ParameterExpression[]@,System.Linq.Expressions.ParameterExpression[]@)">
            <summary>
            Generate bool Serialize(CodecWriter codec, IEnumerator&lt;T> enumerator) method
            </summary>
            <remarks>
            Generated code:
            
            
            * codec - writes output to this codec using Write*() methods
            * enumerator to go through the input T values.
                MoveNext() had to be called on it before passing it in.
            * returns false if no more items, or true if there are more items but the codec buffer is full
            
            <![CDATA[
            bool Serialize(CodecWriter codec, IEnumerator<T> enumerator)
            {
                bool moveNext;
                int count = 1;
                int codecPos;
                T current = enumerator.Current;
                
                var state1, state2, ...;
            
                codec.Write(state1);
                codec.Write(state2);
                ...
            
                while (true) {
            
                    moveNext = enumerator.MoveNext();
                    if (!moveNext)
                        break;
            
                    codecPos = codec.Count;
                    if (! (codec.Write(delta1) && codec.Write(delta2) && ...) ) {
                        codec.Count = codecPos;
                        break;
                    }
            
                    count++;
                }
            
                codec.FinishBlock(count, moveNext);
            
                return moveNext;
            }]]>
            </remarks>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.DynamicSerializer`1.GenerateDeSerializer(System.Linq.Expressions.ParameterExpression[]@,System.Linq.Expressions.ParameterExpression[]@)">
            <summary>
            Generate void DeSerialize(CodecReader codec, Buffer&lt;T> result, int maxItemCount) method
            </summary>
            <remarks> 
            Generated code:
            
            * codec to read the values from
            * result will get all the generated values
            * maxItemCount - maximum number of items to be deserialized
            
            <![CDATA[
            void DeSerialize(CodecReader codec, Buffer<T> result, int maxItemCount)
            {
                int count = codec.ReadHeader();
                if (count > maxItemCount)
                    count = maxItemCount;
                
                var state1, state2, ...;
            
                result.Add(ReadField(codec, ref state));
            
                while (true) {
            
                    count--;
                    if (count == 0)
                        break;
            
                    result.Add(ReadField(codec, ref state));
                }
            }]]>
            </remarks>
        </member>
        <member name="P:NYurik.TimeSeriesDb.Serializers.BlockSerializer.DynamicSerializer`1.Serialize">
            <summary>
             * codec - writes output to this codec using Write*() methods
            * enumerator to go through the input T values.
                MoveNext() had to be called on it and returned true before passing it in.
            * returns false if no more items, or true if there are more items but the codec buffer is full
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.Serializers.BlockSerializer.DynamicSerializer`1.DeSerialize">
            <summary>
            * codec to read the values from
            * result will get all the generated values
            * maxItemCount - maximum number of items to be deserialized
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.ScaledDeltaFloatField.#ctor(NYurik.TimeSeriesDb.Serializers.BlockSerializer.IStateStore,System.Type,System.String)">
            <summary>
            Integer and Float delta serializer.
            </summary>
            <param name="stateStore">Serializer with the state</param>
            <param name="fieldType">Type of value to store</param>
            <param name="stateName">Name of the value (for debugging)</param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.ScaledDeltaFloatField.StateToValue(System.Linq.Expressions.Expression)">
            <summary>
            valueGetter(): (T)state * ((T)Divider / Multiplier)
            </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.Serializers.BlockSerializer.ScaledDeltaFloatField.Multiplier">
            <summary> Value is multiplied by this parameter before storage</summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.Serializers.BlockSerializer.ScaledDeltaFloatField.Divider">
            <summary> Value is divided by this parameter before storage </summary>
        </member>
        <member name="P:NYurik.TimeSeriesDb.Serializers.BlockSerializer.ScaledDeltaFloatField.Precision">
            <summary> If not NaN, the new data will be checked for loss of precision before storing.
             
            If Scale (Multiplier/Divider) is 100 (storing two decimal places), setting Precision to 0.0001
            will cause 5.24001 to be stored as 5.24, but 5.2401 will cause an error.
            
            Setting precision reduces the range (-max to +max) of numbers that may be stored.
            Double has 15 significant digits, while Float - only has 7, so depending on the type,
              float: 10^7 * Precision ==> between -1e3 and +1e3
              double: 10^15 * Precision ==> between -1e11 and +1e11
            
            When non NaN, the following data validation will be performed during serialization:
            if (Math.Abs(Math.Round(value * Multiplier / Divider, 0) * ((T)Divider / Multiplier) - value) > Precision)
                throw new SerializerException();
            
            By default, the precision is set to NaN.
            </summary>
        </member>
        <member name="F:NYurik.TimeSeriesDb.Serializers.BlockSerializer.CodecBase.ReservedSpace">
            <summary>
            Each block will have at least this many bytes reserved for hash value + UInt32 (count)
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.CodecReader.#ctor(System.ArraySegment{System.Byte})">
            <summary> Create codec for reading only </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.SubFieldInfo.Clone(NYurik.TimeSeriesDb.Serializers.BlockSerializer.BaseField)">
            <summary>
            Create a new SubField with the given new serializer field.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.SubFieldInfo.CreateNewField``1">
            <summary>
            Create a new field object of type <typeparamref name="T"/> for this property or field.
            The field type must implement typical 3-parameter constructor (IStateStore, Type, string)
            </summary>
        </member>
        <member name="F:NYurik.TimeSeriesDb.Serializers.BlockSerializer.CodecWriter.PaddingSize">
            All buffers are created slightly bigger than needed so that WriteOperations do not need to check for buffer end for every byte
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.CodecWriter.#ctor(System.Int32)">
            <summary> Create writing codec. The internal buffer is padded with extra space. </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.CodecWriter.WriteSignedValue(System.Int64)">
            <summary>
            Write signed long value in compressed form, returning true if it fits, or false otherwise
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.BlockSerializer.CodecWriter.ThrowIfNotEnoughSpace(System.Byte)">
            <summary>
            TODO: Make this method Debug only!
            </summary>
            <param name="neededSpace"></param>
        </member>
        <member name="M:NYurik.TimeSeriesDb.NativeWinApis.UnmapViewOfFile(System.IntPtr)">
            <summary>
            Unmap file - we cannot use SafeHandle objects because they may already be disposed
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.NativeWinApis.CloseHandle(System.IntPtr)">
            <summary>
            Close handle - we cannot use SafeHandle objects because they may already be disposed
            </summary>
        </member>
        <member name="T:NYurik.TimeSeriesDb.DefaultTypeSerializer`1">
            <summary>
            Default Serializer operates with the memory representation of the explicit structs
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.DynamicCodeFactory.GetIndexField``1">
            <summary>
            Find default timestamp field's <see cref="T:System.Reflection.FieldInfo"/> for type T.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.DynamicCodeFactory.GetIndexField(System.Type)">
            <summary>
            Find default timestamp field's <see cref="T:System.Reflection.FieldInfo"/> for <param name="type"/>.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.DynamicCodeFactory.FindIndexField(System.Type)">
            <summary>
            Find default timestamp field's <see cref="T:System.Reflection.FieldInfo"/> for <param name="type"/>, or null if not found.
            </summary>
        </member>
        <member name="M:NYurik.TimeSeriesDb.Serializers.DynamicCodeFactory.GetIndexAccessor``2(System.Reflection.FieldInfo)">
            <summary>
            Create a delegate that extracts a long index value from the struct of type T.
            </summary>
            <param name="indexField">Optionally provide the index field, otherwise will attempt to find default.</param>
        </member>
        <member name="T:NYurik.TimeSeriesDb.IndexAttribute">
            <summary>
            Use this attribute to specify which field to use as a timestamp
            </summary>
        </member>
    </members>
</doc>
